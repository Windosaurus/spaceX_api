{"ast":null,"code":"import _regeneratorRuntime from\"/Users/windsorhuang/Desktop/soma-frontend-code-test-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/windsorhuang/Desktop/soma-frontend-code-test-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import{FETCH_HISTORY_PENDING,FETCH_HISTORY_SUCCESS,FETCH_HISTORY_ERROR,SET_HISTORY_SEARCH_FILTER}from'../types';export var fetchAllHistory=function fetchAllHistory(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response,history,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch({type:FETCH_HISTORY_PENDING});_context.next=4;return axios.get('https://api.spacexdata.com/v3/history');case 4:response=_context.sent;history=[];for(i=0;i<response.data.length;i++){history.push({title:response.data[i].title,link:response.data[i].links.wikipedia,details:response.data[i].details,date:response.data[i].event_date_utc,id:response.data[i].id});}console.log('Formatted history data',history);dispatch({type:FETCH_HISTORY_SUCCESS,payload:history});_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);dispatch({type:FETCH_HISTORY_ERROR});case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var filterHistoryBySearch=function filterHistoryBySearch(searchValue){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:SET_HISTORY_SEARCH_FILTER,payload:searchValue});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/windsorhuang/Desktop/soma-frontend-code-test-master/src/redux/actions/historyActions.js"],"names":["axios","FETCH_HISTORY_PENDING","FETCH_HISTORY_SUCCESS","FETCH_HISTORY_ERROR","SET_HISTORY_SEARCH_FILTER","fetchAllHistory","dispatch","type","get","response","history","i","data","length","push","title","link","links","wikipedia","details","date","event_date_utc","id","console","log","payload","filterHistoryBySearch","searchValue"],"mappings":"+VAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OACEC,qBADF,CAEEC,qBAFF,CAGEC,mBAHF,CAIEC,yBAJF,KAKO,UALP,CAOA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,kGAAM,iBAAOC,QAAP,yJAEjCA,QAAQ,CAAC,CACPC,IAAI,CAAEN,qBADC,CAAD,CAAR,CAFiC,sBAMVD,CAAAA,KAAK,CAACQ,GAAN,CAAU,uCAAV,CANU,QAM3BC,QAN2B,eAQ3BC,OAR2B,CAQjB,EARiB,CASjC,IAASC,CAAT,CAAa,CAAb,CAAgBA,CAAC,CAAGF,QAAQ,CAACG,IAAT,CAAcC,MAAlC,CAA0CF,CAAC,EAA3C,CAA+C,CAC7CD,OAAO,CAACI,IAAR,CAAa,CACXC,KAAK,CAAEN,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBI,KADb,CAEXC,IAAI,CAAEP,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBM,KAAjB,CAAuBC,SAFlB,CAGXC,OAAO,CAAEV,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBQ,OAHf,CAIXC,IAAI,CAAEX,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBU,cAJZ,CAKXC,EAAE,CAAEb,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBW,EALV,CAAb,EAOD,CAEDC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAsCd,OAAtC,EAEAJ,QAAQ,CAAC,CACPC,IAAI,CAAEL,qBADC,CAEPuB,OAAO,CAAEf,OAFF,CAAD,CAAR,CArBiC,iFA0BjCJ,QAAQ,CAAC,CACPC,IAAI,CAAEJ,mBADC,CAAD,CAAR,CA1BiC,qEAAN,gEAAxB,CAgCP,MAAO,IAAMuB,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,WAAD,kGAAiB,kBAAOrB,QAAP,sHACpDA,QAAQ,CAAC,CACPC,IAAI,CAAEH,yBADC,CAEPqB,OAAO,CAAEE,WAFF,CAAD,CAAR,CADoD,wDAAjB,kEAA9B","sourcesContent":["import axios from 'axios';\n\nimport {\n  FETCH_HISTORY_PENDING,\n  FETCH_HISTORY_SUCCESS,\n  FETCH_HISTORY_ERROR,\n  SET_HISTORY_SEARCH_FILTER,\n} from '../types';\n\nexport const fetchAllHistory = () => async (dispatch) => {\n  try {\n    dispatch({\n      type: FETCH_HISTORY_PENDING,\n    });\n\n    const response = await axios.get('https://api.spacexdata.com/v3/history');\n\n    const history = [];\n    for (let i = 0; i < response.data.length; i++) {\n      history.push({\n        title: response.data[i].title,\n        link: response.data[i].links.wikipedia,\n        details: response.data[i].details,\n        date: response.data[i].event_date_utc,\n        id: response.data[i].id,\n      });\n    }\n\n    console.log('Formatted history data', history);\n\n    dispatch({\n      type: FETCH_HISTORY_SUCCESS,\n      payload: history,\n    });\n  } catch (e) {\n    dispatch({\n      type: FETCH_HISTORY_ERROR,\n    });\n  }\n};\n\nexport const filterHistoryBySearch = (searchValue) => async (dispatch) => {\n  dispatch({\n    type: SET_HISTORY_SEARCH_FILTER,\n    payload: searchValue,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}