{"ast":null,"code":"import _regeneratorRuntime from\"/Users/windsorhuang/Desktop/soma-frontend-code-test-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/windsorhuang/Desktop/soma-frontend-code-test-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';import{FETCH_MISSIONS_PENDING,FETCH_MISSIONS_SUCCESS,FETCH_MISSIONS_ERROR,SET_MISSIONS_ROCKET_FILTER,SET_MISSIONS_SEARCH_FILTER}from'../types';export var fetchAllMissions=function fetchAllMissions(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response,missions,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;dispatch({type:FETCH_MISSIONS_PENDING});_context.next=4;return axios.get('https://api.spacexdata.com/v3/launches');case 4:response=_context.sent;missions=[];for(i=0;i<response.data.length;i++){missions.push({rocket:response.data[i].rocket.rocket_name,rocketId:response.data[i].rocket.rocket_id,type:response.data[i].rocket.rocket_type,location:response.data[i].launch_site.site_name,details:response.data[i].details,date:response.data[i].launch_date_utc,link:response.data[i].links.article_link});}console.log('Formatted mission data',missions);dispatch({type:FETCH_MISSIONS_SUCCESS,payload:missions});_context.next=14;break;case 11:_context.prev=11;_context.t0=_context[\"catch\"](0);dispatch({type:FETCH_MISSIONS_ERROR});case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,11]]);}));return function(_x){return _ref.apply(this,arguments);};}();};export var filterMissionsByRocket=function filterMissionsByRocket(rocketId){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:dispatch({type:SET_MISSIONS_ROCKET_FILTER,payload:rocketId});case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();};export var filterMissionsBySearch=function filterMissionsBySearch(searchValue){return/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:dispatch({type:SET_MISSIONS_SEARCH_FILTER,payload:searchValue});case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x3){return _ref3.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/windsorhuang/Desktop/soma-frontend-code-test-master/src/redux/actions/missionsActions.js"],"names":["axios","FETCH_MISSIONS_PENDING","FETCH_MISSIONS_SUCCESS","FETCH_MISSIONS_ERROR","SET_MISSIONS_ROCKET_FILTER","SET_MISSIONS_SEARCH_FILTER","fetchAllMissions","dispatch","type","get","response","missions","i","data","length","push","rocket","rocket_name","rocketId","rocket_id","rocket_type","location","launch_site","site_name","details","date","launch_date_utc","link","links","article_link","console","log","payload","filterMissionsByRocket","filterMissionsBySearch","searchValue"],"mappings":"+VAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OACEC,sBADF,CAEEC,sBAFF,CAGEC,oBAHF,CAIEC,0BAJF,CAKEC,0BALF,KAMO,UANP,CAQA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,kGAAM,iBAAOC,QAAP,0JAElCA,QAAQ,CAAC,CACPC,IAAI,CAAEP,sBADC,CAAD,CAAR,CAFkC,sBAMXD,CAAAA,KAAK,CAACS,GAAN,CAAU,wCAAV,CANW,QAM5BC,QAN4B,eAQ5BC,QAR4B,CAQjB,EARiB,CASlC,IAASC,CAAT,CAAa,CAAb,CAAgBA,CAAC,CAAGF,QAAQ,CAACG,IAAT,CAAcC,MAAlC,CAA0CF,CAAC,EAA3C,CAA+C,CAC7CD,QAAQ,CAACI,IAAT,CAAc,CACZC,MAAM,CAAEN,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBI,MAAjB,CAAwBC,WADpB,CAEZC,QAAQ,CAAER,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBI,MAAjB,CAAwBG,SAFtB,CAGZX,IAAI,CAAEE,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBI,MAAjB,CAAwBI,WAHlB,CAIZC,QAAQ,CAAEX,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBU,WAAjB,CAA6BC,SAJ3B,CAKZC,OAAO,CAAEd,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBY,OALd,CAMZC,IAAI,CAAEf,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBc,eANX,CAOZC,IAAI,CAAEjB,QAAQ,CAACG,IAAT,CAAcD,CAAd,EAAiBgB,KAAjB,CAAuBC,YAPjB,CAAd,EASD,CAEDC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAsCpB,QAAtC,EAEAJ,QAAQ,CAAC,CACPC,IAAI,CAAEN,sBADC,CAEP8B,OAAO,CAAErB,QAFF,CAAD,CAAR,CAvBkC,iFA4BlCJ,QAAQ,CAAC,CACPC,IAAI,CAAEL,oBADC,CAAD,CAAR,CA5BkC,qEAAN,gEAAzB,CAkCP,MAAO,IAAM8B,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACf,QAAD,kGAAc,kBAAOX,QAAP,sHAClDA,QAAQ,CAAC,CACPC,IAAI,CAAEJ,0BADC,CAEP4B,OAAO,CAAEd,QAFF,CAAD,CAAR,CADkD,wDAAd,kEAA/B,CAOP,MAAO,IAAMgB,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,WAAD,kGAAiB,kBAAO5B,QAAP,sHACrDA,QAAQ,CAAC,CACPC,IAAI,CAAEH,0BADC,CAEP2B,OAAO,CAAEG,WAFF,CAAD,CAAR,CADqD,wDAAjB,kEAA/B","sourcesContent":["import axios from 'axios';\n\nimport {\n  FETCH_MISSIONS_PENDING,\n  FETCH_MISSIONS_SUCCESS,\n  FETCH_MISSIONS_ERROR,\n  SET_MISSIONS_ROCKET_FILTER,\n  SET_MISSIONS_SEARCH_FILTER,\n} from '../types';\n\nexport const fetchAllMissions = () => async (dispatch) => {\n  try {\n    dispatch({\n      type: FETCH_MISSIONS_PENDING,\n    });\n\n    const response = await axios.get('https://api.spacexdata.com/v3/launches');\n\n    const missions = [];\n    for (let i = 0; i < response.data.length; i++) {\n      missions.push({\n        rocket: response.data[i].rocket.rocket_name,\n        rocketId: response.data[i].rocket.rocket_id,\n        type: response.data[i].rocket.rocket_type,\n        location: response.data[i].launch_site.site_name,\n        details: response.data[i].details,\n        date: response.data[i].launch_date_utc,\n        link: response.data[i].links.article_link,\n      });\n    }\n\n    console.log('Formatted mission data', missions);\n\n    dispatch({\n      type: FETCH_MISSIONS_SUCCESS,\n      payload: missions,\n    });\n  } catch (e) {\n    dispatch({\n      type: FETCH_MISSIONS_ERROR,\n    });\n  }\n};\n\nexport const filterMissionsByRocket = (rocketId) => async (dispatch) => {\n  dispatch({\n    type: SET_MISSIONS_ROCKET_FILTER,\n    payload: rocketId,\n  });\n};\n\nexport const filterMissionsBySearch = (searchValue) => async (dispatch) => {\n  dispatch({\n    type: SET_MISSIONS_SEARCH_FILTER,\n    payload: searchValue,\n  });\n};\n"]},"metadata":{},"sourceType":"module"}